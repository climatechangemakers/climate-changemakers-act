CREATE VIEW issue_and_focus AS
SELECT
  issue.id,
  issue.title,
  issue.precomposed_tweet_template,
  issue.image_url,
  issue.description,
  CASE
      WHEN (
        -- Only mark the most recently focused issue that's active as `is_focused`.
        SELECT issue.id FROM issue
        JOIN focus_issue ON focus_issue.issue_id = issue.id
        WHERE issue.is_active = 1
        ORDER BY focus_issue.focused_at DESC LIMIT 1
      ) = issue.id THEN TRUE
      ELSE FALSE
  END AS is_focused,
  issue.is_active
FROM issue;

selectForId:
SELECT
  id,
  title,
  precomposed_tweet_template,
  image_url,
  description,
  -- We shouldn't have to do this, but this is a bug in SQLDelight.
  -- https://github.com/cashapp/sqldelight/issues/3682.
  CASE is_focused
    WHEN TRUE THEN 1
    ELSE 0
  END is_focused_int
FROM issue_and_focus
WHERE is_active = 1 AND id = :id;

selectTitleForId:
SELECT title
FROM issue_and_focus
WHERE id = :issueId AND is_active = 1;

selectAllActive:
SELECT
  id,
  title,
  precomposed_tweet_template,
  image_url,
  description,
  -- We shouldn't have to do this, but this is a bug in SQLDelight.
  -- https://github.com/cashapp/sqldelight/issues/3682.
  CASE is_focused
    WHEN TRUE THEN 1
    ELSE 0
  END is_focused_int
FROM issue_and_focus
WHERE is_active = 1;

selectActiveFocusIssue:
SELECT id, title, image_url, description
FROM issue_and_focus
WHERE is_focused = TRUE AND is_active = 1;

selectActiveUnfocusedIssues:
SELECT id, title, image_url, description
FROM issue_and_focus
WHERE is_focused = FALSE AND is_active = 1
ORDER BY (
  SELECT focus_issue.focused_at FROM focus_issue
  WHERE focus_issue.issue_id = id
  ORDER BY focus_issue.focused_at DESC LIMIT 1
) DESC;

rowCount:
SELECT COUNT(*) FROM issue_and_focus WHERE id = :issueId;

selectTweetTemplate:
SELECT precomposed_tweet_template
FROM issue_and_focus
WHERE id = :issueId;